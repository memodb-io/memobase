from . import ja_user_profile_topics
from ..models.response import AIUserProfiles
from ..env import CONFIG, LOG
from .utils import pack_profiles_into_string

ADD_KWARGS = {
    "prompt_id": "ja_extract_profile",
}

EXAMPLES = [
    (
        """- ユーザーがアシスタントに挨拶した。
""",
        AIUserProfiles(**{"facts": []}),
    ),
    (
        """
- ユーザーの好きな映画は『インセプション』と『インターステラー』 [2025/01/01に言及]
- ユーザーの一番好きな映画は『TENET テネット』 [2025/01/02に言及]
""",
        AIUserProfiles(
            **{
                "facts": [
                    {
                        "topic": "興味",
                        "sub_topic": "映画",
                        "memo": "『インセプション』、『インターステラー』[2025/01/01に言及]；一番好きな映画は『TENET テネット』[2025/01/02に言及]",
                    },
                    {
                        "topic": "興味",
                        "sub_topic": "映画監督",
                        "memo": "ユーザーはクリスチャン・ノーラン監督の大ファンだと思われる",
                    },
                ]
            }
        ),
    ),
]

DEFAULT_JOB = """あなたはプロの心理学者です。
あなたの仕事は、ユーザーのメモを詳細に読み、構造化された形式でユーザーの重要なプロフィールを抽出することです。
次に、関連する重要な事実、ユーザーの好みを抽出します。これらの情報は、ユーザーの状態を評価するのに役立ちます。
あなたは、明示された情報を抽出するだけでなく、会話中に暗示されている情報も推測する必要があります。
これらの情報を記録する際は、ユーザーが入力した言語と同じ言語を使用してください。
"""

FACT_RETRIEVAL_PROMPT = """{system_prompt}

## フォーマット
### 入力
#### トピックガイドライン
あなたには、収集・抽出に集中すべき、ユーザーに関連するトピックとサブトピックの一覧が与えられます。
ユーザーに関連しないトピックについては、情報の混乱を招く可能性があるため、収集しないでください。
例えば、メモに他人の職位が言及されている場合、"仕事{tab}職位"というトピックを生成しないでください。
必要なら、新しいトピック/サブトピックを作成しても構いません。ただしユーザーが禁止していない場合に限ります。

#### 既存のトピック
あなたには、ユーザーとアシスタント間ですでに共有されている、トピックとサブトピックの一覧が与えられます。
会話の中でそれらが再度言及された場合は、同じものを使うことを検討してください。

#### メモ
あなたには、ユーザーに関する情報・出来事・好みなどを含む、Markdown形式のメモが与えられます。
このメモは、ユーザーとアシスタントの会話から要約されたものです。

### 出力
#### 思考
あなたは、メモにはどのようなトピックやサブトピックが言及されているか？また、そのメモからどのような示唆を推測できるか？を考える必要があります。
#### プロフィール

あなたの思考プロセスの後、あなたは、メモから事実と好みを抽出し、順序付きリストに整理する必要があります:
- TOPIC{tab}SUB_TOPIC{tab}MEMO
例:
- 基本情報{tab}氏名{tab}メリンダ
- 仕事{tab}役職{tab}ソフトウェアエンジニア

各行は1つの事実または好みを表し、以下を含みます:
1. TOPIC: 大分類（例: 基本情報、仕事、興味 など）
2. SUB_TOPIC: 詳細分類（例: 氏名、役職、映画 など）
3. MEMO: 「ユーザー」に関する抽出結果。メモに時間情報が含まれる場合は[...]で表記。
これらは `{tab}` で区切り、各行は "- " で始めて`\n`で改行区切りにしてください。

最終出力テンプレート:
```
POSSIBLE TOPICS THINKING
---
- TOPIC{tab}SUB_TOPIC{tab}MEMO
- ...
```

## 抽出例
いくつかの例を示します：
{examples}
上記のMarkdown形式のリストフォーマットで事実と好みを返してください。
実際の値を持つ属性のみを抽出してください。ユーザーが値を提供しない場合は抽出しないでください。
あなたは、まず最初に思考して、そして、メモから事実と好みを抽出する必要があります。

#### トピック指針
以下はあなたが収集・抽出に集中すべきトピックとサブトピックの一覧です:
{topic_examples}

以下を念頭に置いてください:
- もしユーザが日時に関連する情報を発言している場合は、データから具体的な日付を推定してください。
- 日付は可能な限り具体的な日付を使用してください。「今日」「昨日」のような相対表現は使用しないでください。
- 以下の会話に関連する情報が見つからなければ、空のリストを返しても構いません。
- フォーマットと抽出例セクションに記載されている形式でレスポンスを返すことを厳守してください。
- 明示的に発言された内容だけでなく、会話から暗示されることを推測してください。
- 同一トピック/サブトピックに属する内容は1要素にまとめ、重複を避けてください。
- メモに含まれる日時は2つの種類があります。1つはメモが「言及された日時」、もう1つはメモ内の「イベントが発生した日時」です。どちらも重要です。混同しないようにしてください。日時情報を正確に抽出し、関連するメモの後に時間表記を[...]を使用して記述する必要があります。
- 実際の値を持つ属性のみを抽出してください。ユーザーが値を提供していない場合は、抽出しないでください。

では、あなたのタスクを遂行してください。
以下はユーザーとアシスタントの会話です。会話から関連する事実と好みを抽出・推測して、上記のリスト形式で返してください。
ユーザーが入力した言語を検出し、同じ言語で記録してください。
"""


def pack_input(already_input, chat_strs, strict_mode: bool = False):
    header = ""
    if strict_mode:
        header = "#### トピックガイドラインに記載されていないトピック/サブトピックを抽出しないでください。そうしないと、あなたの回答は無効になります！"
    return f"""{header}
#### 既存のトピック
関連するトピック/サブトピックを抽出する場合は、以下のトピック/サブトピックの命名規則を検討してください:
{already_input}

#### メモ
メモに記載されていないトピック/サブトピックに関する情報は一切出力しないでください。
{chat_strs}
"""


def get_default_profiles() -> str:
    return ja_user_profile_topics.get_prompt()


def get_prompt(topic_examples: str) -> str:
    sys_prompt = CONFIG.system_prompt or DEFAULT_JOB
    examples = "\n\n".join(
        [
            f"""<example>
<input>{p[0]}</input>
<output>
{pack_profiles_into_string(p[1])}
</output>
</example>
"""
            for p in EXAMPLES
        ]
    )
    return FACT_RETRIEVAL_PROMPT.format(
        system_prompt=sys_prompt,
        examples=examples,
        tab=CONFIG.llm_tab_separator,
        topic_examples=topic_examples,
    )


def get_kwargs() -> dict:
    return ADD_KWARGS


if __name__ == "__main__":
    print(get_prompt(get_default_profiles()))
