{
	"openapi": "3.1.0",
	"info": {
		"title": "Memobase API",
		"summary": "APIs for Memobase, a user memory system for LLM Apps",
		"version": "0.0.28"
	},
	"servers": [{
		"url": "https://api.memobase.dev"
	}, {
		"url": "https://api.memboase.cn"
	}],
	"paths": {
		"/api/v1/healthcheck": {
			"get": {
				"tags": ["chore"],
				"summary": "Healthcheck",
				"description": "Check if your memobase is set up correctly",
				"operationId": "healthcheck_api_v1_healthcheck_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n memobase = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n assert memobase.ping()\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n await client.ping();\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\nok := client.Ping()\nif !ok {\n\tpanic(\"Failed to connect to Memobase\")\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/project/profile_config": {
			"get": {
				"tags": ["project"],
				"summary": "Get Project Profile Config String",
				"operationId": "get_project_profile_config_string_api_v1_project_profile_config_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfileConfigDataResponse"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n memobase = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n config = memobase.get_config()\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n const config = await client.getConfig();\n\n",
					"label": "JavaScript"
				}]
			},
			"post": {
				"tags": ["project"],
				"summary": "Update Project Profile Config",
				"operationId": "update_project_profile_config_api_v1_project_profile_config_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProfileConfigData",
								"description": "The profile config to update"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n memobase = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n memobase.update_config('your_profile_config')\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n await client.updateConfig('your_profile_config');\n\n",
					"label": "JavaScript"
				}]
			}
		},
		"/api/v1/project/billing": {
			"get": {
				"tags": ["project"],
				"summary": "Get Project Billing",
				"operationId": "get_project_billing_api_v1_project_billing_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BillingResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/users": {
			"post": {
				"tags": ["user"],
				"summary": "Create User",
				"description": "Create a new user with additional data",
				"operationId": "create_user_api_v1_users_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserData",
								"description": "User data for creating a new user"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n uid = client.add_user({\"ANY\": \"DATA\"})\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n const userId = await client.addUser({ANY: \"DATA\"});\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n\t\"github.com/google/uuid\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Generate a UUID for the user\nuserID := uuid.New().String()\n\n// Create user with some data\ndata := map[string]interface{}{\"ANY\": \"DATA\"}\nresultID, err := client.AddUser(data, userID)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/{user_id}": {
			"get": {
				"tags": ["user"],
				"summary": "Get User",
				"operationId": "get_user_api_v1_users__user_id__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to retrieve",
						"title": "User Id"
					},
					"description": "The ID of the user to retrieve"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDataResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n u = client.get_user(uid)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n const user = await client.getUser(userId);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user by ID\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Access user data\nuserData := user.GetData()\n",
					"label": "Go"
				}]
			},
			"put": {
				"tags": ["user"],
				"summary": "Update User",
				"operationId": "update_user_api_v1_users__user_id__put",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to update",
						"title": "User Id"
					},
					"description": "The ID of the user to update"
				}],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"description": "Updated user data",
								"title": "User Data"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n client.update_user(uid, {\"ANY\": \"NEW_DATA\"})\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n await client.updateUser(userId, {ANY: \"NEW_DATA\"});\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Update user data\nnewData := map[string]interface{}{\"ANY\": \"NEW_DATA\"}\nerr = client.UpdateUser(userID, newData)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			},
			"delete": {
				"tags": ["user"],
				"summary": "Delete User",
				"operationId": "delete_user_api_v1_users__user_id__delete",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to delete",
						"title": "User Id"
					},
					"description": "The ID of the user to delete"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n client.delete_user(uid)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n await client.deleteUser(userId);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Delete user\nerr = client.DeleteUser(userID)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/blobs/{user_id}/{blob_type}": {
			"get": {
				"tags": ["user"],
				"summary": "Get User All Blobs",
				"operationId": "get_user_all_blobs_api_v1_users_blobs__user_id___blob_type__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to fetch blobs for",
						"title": "User Id"
					},
					"description": "The ID of the user to fetch blobs for"
				}, {
					"name": "blob_type",
					"in": "path",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlobType",
						"description": "The type of blobs to retrieve"
					},
					"description": "The type of blobs to retrieve"
				}, {
					"name": "page",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Page number for pagination, starting from 0",
						"default": 0,
						"title": "Page"
					},
					"description": "Page number for pagination, starting from 0"
				}, {
					"name": "page_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Number of items per page, default is 10",
						"default": 10,
						"title": "Page Size"
					},
					"description": "Number of items per page, default is 10"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdsResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n from memobase.core.types import BlobType\n\n memobase = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n user = memobase.get_user('user_id')\n blobs = user.get_all(BlobType.CHAT, page=0, page_size=10)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient, BlobType } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n const user = client.getUser('user_id');\n const blobs = await user.getAll(BlobType.Enum.chat);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/blob\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Get all blobs\nblobs, err := user.GetAll(blob.ChatType)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/blobs/insert/{user_id}": {
			"post": {
				"tags": ["blob"],
				"summary": "Insert Blob",
				"operationId": "insert_blob_api_v1_blobs_insert__user_id__post",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to insert the blob for",
						"title": "User Id"
					},
					"description": "The ID of the user to insert the blob for"
				}],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlobData",
								"description": "The blob data to insert"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n from memobase import ChatBlob\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n b = ChatBlob(messages=[\n    {\n        \"role\": \"user\",\n        \"content\": \"Hi, I'm here again\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Hi, Gus! How can I help you?\"\n    }\n])\n u = client.get_user(uid)\n bid = u.insert(b)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient, Blob, BlobType } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n const blobId = await user.insert(Blob.parse({\n  type: BlobType.Enum.chat,\n  messages: [\n    {\n      role: 'user',\n      content: 'Hi, I\\'m here again'\n    },\n    {\n      role: 'assistant',\n      content: 'Hi, Gus! How can I help you?'\n    }\n  ]\n}));\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/blob\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Create chat blob\nchatBlob := &blob.ChatBlob{\n\tBaseBlob: blob.BaseBlob{\n\t\tType: blob.ChatType,\n\t},\n\tMessages: []blob.OpenAICompatibleMessage{\n\t\t{\n\t\t\tRole:    \"user\",\n\t\t\tContent: \"Hi, I'm here again\",\n\t\t},\n\t\t{\n\t\t\tRole:    \"assistant\",\n\t\t\tContent: \"Hi, Gus! How can I help you?\",\n\t\t},\n\t},\n}\n\n// Insert blob\nblobID, err := user.Insert(chatBlob)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/blobs/{user_id}/{blob_id}": {
			"get": {
				"tags": ["blob"],
				"summary": "Get Blob",
				"operationId": "get_blob_api_v1_blobs__user_id___blob_id__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "blob_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the blob to retrieve",
						"title": "Blob Id"
					},
					"description": "The ID of the blob to retrieve"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlobDataResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n u = client.get_user(uid)\n b = u.get(bid)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n const blob = await user.get(blobId);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/blob\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Get blob\nblob, err := user.Get(blobID)\nif err != nil {\n\tpanic(err)\n}\n\n// If it's a chat blob, you can access its messages\nif chatBlob, ok := blob.(*blob.ChatBlob); ok {\n\tmessages := chatBlob.Messages\n\t// Process messages\n}\n",
					"label": "Go"
				}]
			},
			"delete": {
				"tags": ["blob"],
				"summary": "Delete Blob",
				"operationId": "delete_blob_api_v1_blobs__user_id___blob_id__delete",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "blob_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the blob to delete",
						"title": "Blob Id"
					},
					"description": "The ID of the blob to delete"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n u = client.get_user(uid)\n u.delete(bid)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n await user.delete(blobId);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Delete blob\nerr = user.Delete(blobID)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/profile/{user_id}": {
			"get": {
				"tags": ["profile"],
				"summary": "Get User Profile",
				"description": "Get the real-time user profiles for long term memory",
				"operationId": "get_user_profile_api_v1_users_profile__user_id__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user to get profiles for",
						"title": "User Id"
					},
					"description": "The ID of the user to get profiles for"
				}, {
					"name": "topk",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Number of profiles to retrieve, default is all",
						"title": "Topk"
					},
					"description": "Number of profiles to retrieve, default is all"
				}, {
					"name": "max_token_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Max token size of returned profile content, default is all",
						"title": "Max Token Size"
					},
					"description": "Max token size of returned profile content, default is all"
				}, {
					"name": "prefer_topics",
					"in": "query",
					"required": false,
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Rank prefer topics at first to try to keep them in filtering, default order is by updated time",
						"title": "Prefer Topics"
					},
					"description": "Rank prefer topics at first to try to keep them in filtering, default order is by updated time"
				}, {
					"name": "only_topics",
					"in": "query",
					"required": false,
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Only return profiles with these topics, default is all",
						"title": "Only Topics"
					},
					"description": "Only return profiles with these topics, default is all"
				}, {
					"name": "max_subtopic_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Max subtopic size of the same topic in returned profile, default is all",
						"title": "Max Subtopic Size"
					},
					"description": "Max subtopic size of the same topic in returned profile, default is all"
				}, {
					"name": "topic_limits_json",
					"in": "query",
					"required": false,
					"schema": {
						"type": "string",
						"description": "Set specific subtopic limits for topics in JSON, for example {\"topic1\": 3, \"topic2\": 5}. The limits in this param will override `max_subtopic_size`.",
						"title": "Topic Limits Json"
					},
					"description": "Set specific subtopic limits for topics in JSON, for example {\"topic1\": 3, \"topic2\": 5}. The limits in this param will override `max_subtopic_size`."
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserProfileResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n u = client.get_user(uid)\n p = u.profile()\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n const profiles = await user.profile();\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Get profile\nprofiles, err := user.Profile()\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/buffer/{user_id}/{buffer_type}": {
			"post": {
				"tags": ["buffer"],
				"summary": "Flush Buffer",
				"description": "Get the real-time user profiles for long term memory",
				"operationId": "flush_buffer_api_v1_users_buffer__user_id___buffer_type__post",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "buffer_type",
					"in": "path",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlobType",
						"description": "The type of buffer to flush"
					},
					"description": "The type of buffer to flush"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n u.flush()\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient, BlobType } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n await user.flush(BlobType.Enum.chat);\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/blob\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Flush buffer\nerr = user.Flush(blob.ChatType)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/profile/{user_id}/{profile_id}": {
			"delete": {
				"tags": ["profile"],
				"summary": "Delete User Profile",
				"description": "Get the real-time user profiles for long term memory",
				"operationId": "delete_user_profile_api_v1_users_profile__user_id___profile_id__delete",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "profile_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the profile to delete",
						"title": "Profile Id"
					},
					"description": "The ID of the profile to delete"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n memobase = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n memobase.delete_profile('user_id', 'profile_id')\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n\n await client.deleteProfile('user_id', 'profile_id');\n\n",
					"label": "JavaScript"
				}, {
					"lang": "Go",
					"source": "// To use the Go SDK, install the package:\n// go get github.com/memodb-io/memobase/src/client/memobase-go@latest\n\nimport (\n\t\"github.com/memodb-io/memobase/src/client/memobase-go/core\"\n)\n\nprojectURL := \"YOUR_PROJECT_URL\"\napiKey := \"YOUR_API_KEY\"\nclient, err := core.NewMemoBaseClient(projectURL, apiKey)\nif err != nil {\n\tpanic(err)\n}\n\n// Get user\nuser, err := client.GetUser(userID)\nif err != nil {\n\tpanic(err)\n}\n\n// Delete profile\nerr = user.DeleteProfile(profileID)\nif err != nil {\n\tpanic(err)\n}\n",
					"label": "Go"
				}]
			}
		},
		"/api/v1/users/event/{user_id}": {
			"get": {
				"tags": ["event"],
				"summary": "Get User Events",
				"operationId": "get_user_events_api_v1_users_event__user_id__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "topk",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Number of events to retrieve, default is 10",
						"default": 10,
						"title": "Topk"
					},
					"description": "Number of events to retrieve, default is 10"
				}, {
					"name": "max_token_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Max token size of returned events",
						"title": "Max Token Size"
					},
					"description": "Max token size of returned events"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEventsDataResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n events = u.event(topk=10, max_token_size=1000)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n const events = await user.event();\n\n",
					"label": "JavaScript"
				}]
			}
		},
		"/api/v1/users/context/{user_id}": {
			"get": {
				"tags": ["context"],
				"summary": "Get User Context",
				"operationId": "get_user_context_api_v1_users_context__user_id__get",
				"parameters": [{
					"name": "user_id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The ID of the user",
						"title": "User Id"
					},
					"description": "The ID of the user"
				}, {
					"name": "max_token_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Max token size of returned Context",
						"default": 1000,
						"title": "Max Token Size"
					},
					"description": "Max token size of returned Context"
				}, {
					"name": "prefer_topics",
					"in": "query",
					"required": false,
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Rank prefer topics at first to try to keep them in filtering, default order is by updated time",
						"title": "Prefer Topics"
					},
					"description": "Rank prefer topics at first to try to keep them in filtering, default order is by updated time"
				}, {
					"name": "only_topics",
					"in": "query",
					"required": false,
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Only return profiles with these topics, default is all",
						"title": "Only Topics"
					},
					"description": "Only return profiles with these topics, default is all"
				}, {
					"name": "max_subtopic_size",
					"in": "query",
					"required": false,
					"schema": {
						"type": "integer",
						"description": "Max subtopic size of the same topic in returned Context",
						"title": "Max Subtopic Size"
					},
					"description": "Max subtopic size of the same topic in returned Context"
				}, {
					"name": "topic_limits_json",
					"in": "query",
					"required": false,
					"schema": {
						"type": "string",
						"description": "Set specific subtopic limits for topics in JSON, for example {\"topic1\": 3, \"topic2\": 5}. The limits in this param will override `max_subtopic_size`.",
						"title": "Topic Limits Json"
					},
					"description": "Set specific subtopic limits for topics in JSON, for example {\"topic1\": 3, \"topic2\": 5}. The limits in this param will override `max_subtopic_size`."
				}, {
					"name": "profile_event_ratio",
					"in": "query",
					"required": false,
					"schema": {
						"type": "number",
						"description": "Profile event ratio of returned Context",
						"default": 0.8,
						"title": "Profile Event Ratio"
					},
					"description": "Profile event ratio of returned Context"
				}],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserContextDataResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"x-code-samples": [{
					"lang": "Python",
					"source": "# To use the Python SDK, install the package:\n# pip install memobase\n\n from memobase import Memobase\n\n client = Memobase(project_url='PROJECT_URL', api_key='PROJECT_TOKEN')\n\n context = u.context(max_token_size=1000, \n                    prefer_topics=['work', 'family'], \n                    only_topics=None, \n                    max_subtopic_size=5, \n                    topic_limits={'work': 3, 'family': 2}, \n                    profile_event_ratio=0.8)\n\n",
					"label": "Python"
				}, {
					"lang": "JavaScript",
					"source": "// To use the JavaScript SDK, install the package:\n// npm install @memobase/memobase\n\n import { MemoBaseClient } from '@memobase/memobase';\n\n const client = new MemoBaseClient(process.env.MEMOBASE_PROJECT_URL, process.env.MEMOBASE_API_KEY);\n const user = await client.getUser(userId);\n\n const context = await user.context({\n  maxTokenSize: 1000,\n  preferTopics: ['work', 'family'],\n  onlyTopics: null,\n  maxSubtopicSize: 5,\n  topicLimits: {work: 3, family: 2},\n  profileEventRatio: 0.8\n});\n\n",
					"label": "JavaScript"
				}]
			}
		}
	},
	"components": {
		"schemas": {
			"BaseResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"type": "object"
						}, {
							"type": "null"
						}],
						"title": "Data",
						"description": "Response data payload"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "BaseResponse"
			},
			"BillingData": {
				"properties": {
					"token_left": {
						"anyOf": [{
							"type": "integer"
						}, {
							"type": "null"
						}],
						"title": "Token Left",
						"description": "Total token left"
					},
					"next_refill_at": {
						"anyOf": [{
							"type": "string",
							"format": "date-time"
						}, {
							"type": "null"
						}],
						"title": "Next Refill At",
						"description": "Next refill time"
					},
					"project_token_cost_month": {
						"type": "integer",
						"title": "Project Token Cost Month",
						"description": "Token cost of this project for this month"
					}
				},
				"type": "object",
				"required": ["project_token_cost_month"],
				"title": "BillingData"
			},
			"BillingResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/BillingData"
						}, {
							"type": "null"
						}],
						"description": "Response containing token left"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "BillingResponse"
			},
			"BlobData": {
				"properties": {
					"blob_type": {
						"$ref": "#/components/schemas/BlobType"
					},
					"blob_data": {
						"type": "object",
						"title": "Blob Data"
					},
					"fields": {
						"anyOf": [{
							"type": "object"
						}, {
							"type": "null"
						}],
						"title": "Fields"
					},
					"created_at": {
						"anyOf": [{
							"type": "string",
							"format": "date-time"
						}, {
							"type": "null"
						}],
						"title": "Created At"
					},
					"updated_at": {
						"anyOf": [{
							"type": "string",
							"format": "date-time"
						}, {
							"type": "null"
						}],
						"title": "Updated At"
					}
				},
				"type": "object",
				"required": ["blob_type", "blob_data"],
				"title": "BlobData"
			},
			"BlobDataResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/BlobData"
						}, {
							"type": "null"
						}],
						"description": "Response containing blob data"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "BlobDataResponse"
			},
			"BlobType": {
				"type": "string",
				"enum": ["chat", "doc", "image", "code", "transcript"],
				"title": "BlobType"
			},
			"CODE": {
				"type": "integer",
				"enum": [0, 400, 401, 403, 404, 405, 409, 422, 500, 501, 502, 503, 504],
				"title": "CODE"
			},
			"ContextData": {
				"properties": {
					"context": {
						"type": "string",
						"title": "Context",
						"description": "Context string"
					}
				},
				"type": "object",
				"required": ["context"],
				"title": "ContextData"
			},
			"EventData": {
				"properties": {
					"profile_delta": {
						"items": {
							"$ref": "#/components/schemas/ProfileDelta"
						},
						"type": "array",
						"title": "Profile Delta",
						"description": "List of profile data"
					}
				},
				"type": "object",
				"required": ["profile_delta"],
				"title": "EventData"
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						},
						"type": "array",
						"title": "Detail"
					}
				},
				"type": "object",
				"title": "HTTPValidationError"
			},
			"IdData": {
				"properties": {
					"id": {
						"anyOf": [{
							"type": "string",
							"format": "uuid4"
						}, {
							"type": "string",
							"format": "uuid5"
						}],
						"title": "Id",
						"description": "The UUID identifier"
					}
				},
				"type": "object",
				"required": ["id"],
				"title": "IdData"
			},
			"IdResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/IdData"
						}, {
							"type": "null"
						}],
						"description": "Response containing a single ID"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "IdResponse"
			},
			"IdsData": {
				"properties": {
					"ids": {
						"items": {
							"anyOf": [{
								"type": "string",
								"format": "uuid4"
							}, {
								"type": "string",
								"format": "uuid5"
							}]
						},
						"type": "array",
						"title": "Ids",
						"description": "List of UUID identifiers"
					}
				},
				"type": "object",
				"required": ["ids"],
				"title": "IdsData"
			},
			"IdsResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/IdsData"
						}, {
							"type": "null"
						}],
						"description": "Response containing multiple IDs"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "IdsResponse"
			},
			"ProfileConfigData": {
				"properties": {
					"profile_config": {
						"type": "string",
						"title": "Profile Config",
						"description": "Profile config string"
					}
				},
				"type": "object",
				"required": ["profile_config"],
				"title": "ProfileConfigData"
			},
			"ProfileConfigDataResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/ProfileConfigData"
						}, {
							"type": "null"
						}],
						"description": "Response containing profile config data"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "ProfileConfigDataResponse"
			},
			"ProfileData": {
				"properties": {
					"id": {
						"anyOf": [{
							"type": "string",
							"format": "uuid4"
						}, {
							"type": "string",
							"format": "uuid5"
						}],
						"title": "Id",
						"description": "The profile's unique identifier"
					},
					"content": {
						"type": "string",
						"title": "Content",
						"description": "User profile content value"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"title": "Created At",
						"description": "Timestamp when the profile was created"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"title": "Updated At",
						"description": "Timestamp when the profile was last updated"
					},
					"attributes": {
						"anyOf": [{
							"type": "object"
						}, {
							"type": "null"
						}],
						"title": "Attributes",
						"description": "User profile attributes in JSON, containing 'topic', 'sub_topic'"
					}
				},
				"type": "object",
				"required": ["id", "content"],
				"title": "ProfileData"
			},
			"ProfileDelta": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content",
						"description": "The profile content"
					},
					"attributes": {
						"anyOf": [{
							"type": "object"
						}, {
							"type": "null"
						}],
						"title": "Attributes",
						"description": "User profile attributes in JSON, containing 'topic', 'sub_topic'"
					}
				},
				"type": "object",
				"required": ["content", "attributes"],
				"title": "ProfileDelta"
			},
			"UserContextDataResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/ContextData"
						}, {
							"type": "null"
						}],
						"description": "Response containing user context"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "UserContextDataResponse"
			},
			"UserData": {
				"properties": {
					"data": {
						"anyOf": [{
							"type": "object"
						}, {
							"type": "null"
						}],
						"title": "Data",
						"description": "User additional data in JSON"
					},
					"id": {
						"anyOf": [{
							"type": "string",
							"format": "uuid4"
						}, {
							"type": "string",
							"format": "uuid5"
						}, {
							"type": "null"
						}],
						"title": "Id",
						"description": "User ID in UUIDv4/5"
					},
					"created_at": {
						"anyOf": [{
							"type": "string",
							"format": "date-time"
						}, {
							"type": "null"
						}],
						"title": "Created At",
						"description": "Timestamp when the user was created"
					},
					"updated_at": {
						"anyOf": [{
							"type": "string",
							"format": "date-time"
						}, {
							"type": "null"
						}],
						"title": "Updated At",
						"description": "Timestamp when the user was last updated"
					}
				},
				"type": "object",
				"title": "UserData"
			},
			"UserDataResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/UserData"
						}, {
							"type": "null"
						}],
						"description": "Response containing user data"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "UserDataResponse"
			},
			"UserEventData": {
				"properties": {
					"id": {
						"anyOf": [{
							"type": "string",
							"format": "uuid4"
						}, {
							"type": "string",
							"format": "uuid5"
						}],
						"title": "Id",
						"description": "The event's unique identifier"
					},
					"event_data": {
						"anyOf": [{
							"$ref": "#/components/schemas/EventData"
						}, {
							"type": "null"
						}],
						"description": "User event data in JSON"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"title": "Created At",
						"description": "Timestamp when the event was created"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"title": "Updated At",
						"description": "Timestamp when the event was last updated"
					}
				},
				"type": "object",
				"required": ["id"],
				"title": "UserEventData"
			},
			"UserEventsData": {
				"properties": {
					"events": {
						"items": {
							"$ref": "#/components/schemas/UserEventData"
						},
						"type": "array",
						"title": "Events",
						"description": "List of user events"
					}
				},
				"type": "object",
				"required": ["events"],
				"title": "UserEventsData"
			},
			"UserEventsDataResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/UserEventsData"
						}, {
							"type": "null"
						}],
						"description": "Response containing user events"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "UserEventsDataResponse"
			},
			"UserProfileResponse": {
				"properties": {
					"data": {
						"anyOf": [{
							"$ref": "#/components/schemas/UserProfilesData"
						}, {
							"type": "null"
						}],
						"description": "Response containing user profiles"
					},
					"errno": {
						"$ref": "#/components/schemas/CODE",
						"description": "Error code, 0 means success",
						"default": 0
					},
					"errmsg": {
						"type": "string",
						"title": "Errmsg",
						"description": "Error message, empty when success",
						"default": ""
					}
				},
				"type": "object",
				"title": "UserProfileResponse"
			},
			"UserProfilesData": {
				"properties": {
					"profiles": {
						"items": {
							"$ref": "#/components/schemas/ProfileData"
						},
						"type": "array",
						"title": "Profiles",
						"description": "List of user profiles"
					}
				},
				"type": "object",
				"required": ["profiles"],
				"title": "UserProfilesData"
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": {
							"anyOf": [{
								"type": "string"
							}, {
								"type": "integer"
							}]
						},
						"type": "array",
						"title": "Location"
					},
					"msg": {
						"type": "string",
						"title": "Message"
					},
					"type": {
						"type": "string",
						"title": "Error Type"
					}
				},
				"type": "object",
				"required": ["loc", "msg", "type"],
				"title": "ValidationError"
			}
		},
		"securitySchemes": {
			"BearerAuth": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	},
	"security": [{
		"BearerAuth": []
	}]
}